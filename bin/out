#!/bin/bash

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging
. $(dirname $0)/functions.sh

input="$(cat)"
cd "$1"

AWS_ACCESS_KEY_ID="$(echo "$input" | jq -r '.source.access_key // empty')"
AWS_SECRET_ACCESS_KEY="$(echo "$input" | jq -r '.source.secret_key // empty')"
if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
    export AWS_ACCESS_KEY_ID
    export AWS_SECRET_ACCESS_KEY
fi

name="$(echo "$input" | jq -r '.source.name // empty')"
region="$(echo "$input" | jq -r '.source.region // "us-east-1"')"
template="$(echo "$input" | jq -r '.params.template // empty')"
parameters="$(echo "$input" | jq -r '.params.parameters // empty')"
parameters_aws="$(echo "$input" | jq -r '.params.parameters_aws // empty')"
tags="$(echo "$input" | jq -r '.params.tags // empty')"
capabilities="$(echo "$input" | jq '.params.capabilities // []')"
if [ -z "$name" ]; then
    echo "Must specify 'name' parameter"
    exit 1
fi

if [ -z "$template" ]; then
    echo "Must specify 'template' parameter"
    exit 1
fi

if [ ! -f "$template" ]; then
    echo "Template file $template does not exist"
    exit 1
fi


if [ -n "$parameters" ]; then
    if [ ! -f "$parameters" ]; then
        echo "Parameter file $parameters does not exist"
        exit 1
    fi
    parameters_value="$(jq -c 'to_entries | map({ParameterKey: .key, ParameterValue: .value})' < "$parameters")"
elif [ -n "$parameters_aws" ]; then
    if [ ! -f "$parameters_aws" ]; then
        echo "Parameter file $parameters_aws does not exist"
        exit 1
    fi
    parameters_value="$(jq -c '.' < "$parameters_aws")";
else
    parameters_value="$(jq -nc '[]')"
fi


if [ -n "$tags" ]; then
    if [ ! -f "$tags" ]; then
        echo "Tags file does not exist"
        exit 1
    fi
    tags_value="$(jq -c '.' < "$tags")"
else
    tags_value="$(jq -cn '[]')"
fi


echo "Beginning deployment for stack: $name"
echo ""
echo "INITIAL STATE:"
echo ""
pre_deploy_state="$(awaitComplete "$region" "$name")"
exit_code="$?"
echo "$pre_deploy_state"

if [ "$exit_code" -eq 45 ]; then
    echo ""
    echo "Deleting previous stack that failed to create"
    start_epoch="$(date +%s)"
    aws_with_retry --region "$region" cloudformation delete-stack --stack-name "${name}"
    exit_code="$?"
    if [ "$exit_code" -eq 0 ]; then
        end_state="$(awaitComplete "$region" "$name")"
        exit_code="$?"
        if [ "$exit_code" -eq 0 ]; then
            exit_code=25
        fi
        if [ "$exit_code" -ne 25 ]; then
            echo "Failed to delete stack:"
            echo ""
            showErrors "$region" "$name" "$start_epoch"
            echo ""
            echo "FINAL STATE:"
            echo ""
            echo "$end_state"
        fi
    fi
fi

if [ "$exit_code" -eq 0 ] || [ "$exit_code" -eq 35 ] ; then
    type="UPDATE"
    initial_version="$(echo "$pre_deploy_state" | jq -c -r '{ "version": { "arn" : .StackId, "time" : ( .LastUpdatedTime // .CreationTime ) } }')"
elif [ "$exit_code" -eq 25 ]; then
    type="CREATE"
else
    echo ""
    echo "Stack is not in an updatable state"
    exit "$exit_code"
fi

cli_input=$(jq -cn \
   --arg client_token "$(cat /proc/sys/kernel/random/uuid)" \
   --arg change_set_name "concourse-update-$(date -u -I'seconds' | sed 's/:/-/g')"  \
   --arg stack_name "${name}" \
   --argjson parameters "${parameters_value}" \
   --argjson tags "${tags_value}" \
   --argjson capabilities "${capabilities}" \
   --arg type "${type}" \
'{
    "StackName": $stack_name,
    "UsePreviousTemplate": false,
    "Parameters": $parameters,
    "Capabilities": $capabilities,
    "Tags": $tags,
    "ChangeSetName": $change_set_name,
    "ClientToken": $client_token,
    "ChangeSetType": $type
}')

echo ""
echo ""
echo "DEPLOYMENT STARTED:"
echo ""
start_epoch="$(date +%s)"

change_set_arn="$(aws_with_retry --region "$region" cloudformation create-change-set --cli-input-json "${cli_input}" --template-body "file://${template}" --query 'Id' --output text)"
exit_code="$?"
if [ "$exit_code" -ne 0 ]; then
    echo "${change_set_arn}"
    exit "$exit_code"
fi

echo "Change Set \"${change_set_arn}\" created"
echo ""
echo "Waiting for change set creation to complete"
awaitChangeSetCreated "$region" "$change_set_arn"
exit_code="$?"
echo ""
if [ "$exit_code" -eq 25 ]; then
    echo "${initial_version}" >&3
    exit 0
elif [ "$exit_code" -eq 0 ]; then
    echo "Executing change set"
    aws_with_retry --region "$region" cloudformation execute-change-set --change-set-name "${change_set_arn}"
    exit_code="$?"
fi

if [ "$exit_code" -ne 0 ]; then
    exit "$exit_code"
fi

output="$(awaitComplete "$region" "$name")"
exit_code="$?"
if [ "$exit_code" -eq 0 ] ; then
    echo "Deploy Complete"
    new_version="$(echo "$output" | jq -c -r '{ "version": { "arn" : .StackId, "time" : ( .LastUpdatedTime // .CreationTime ) } }')";
    echo "$new_version" >&3
else
    echo "Deploy Failed:"
    echo ""
    showErrors "$region" "$name" "$start_epoch"
fi

echo ""
echo ""
echo "FINAL STATE:"
echo ""
echo "$output"

exit "$exit_code"