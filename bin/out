#!/bin/bash

set -eux
set -o pipefail

exec 3>&1 # use fd 3 for script output
exec 1>&2 # send normal stdout to stderr for logging

WORKING_DIR=$1
echo "WORKING_DIR = $WORKING_DIR"

# read stdin
jq -M -S . < /dev/stdin | tee /tmp/input

# check that the input is valid json
CLOUDFORMATION_FILE=$WORKING_DIR/$(jq .params.cloudformation_file < /tmp/input | tr -d '"')
jq -C . < $CLOUDFORMATION_FILE

# load AWS crds
export AWS_ACCESS_KEY_ID=$(jq .source.aws_access_key < /tmp/input | tr -d '"')
export AWS_SECRET_ACCESS_KEY=$(jq .source.aws_secret_key < /tmp/input | tr -d '"')
export AWS_DEFAULT_REGION=$(jq .source.aws_region < /tmp/input | tr -d '"')
if [[ "$AWS_DEFAULT_REGION" == "null" ]]; then
  export AWS_DEFAULT_REGION=us-east-1
fi

# determine stack action
OLD_STACK_CONFIG=/tmp/$$-old.json
STACK_NAME=$(jq .params.stack_name < /tmp/input | tr -d '"')
if aws cloudformation get-template --stack-name $STACK_NAME > $OLD_STACK_CONFIG; then
  STACK_ACTION=update-stack
else
  STACK_ACTION=create-stack
fi

# sort the cloudformation files
jq -S .TemplateBody < $OLD_STACK_CONFIG > $OLD_STACK_CONFIG.sorted
jq -S . < $CLOUDFORMATION_FILE > $CLOUDFORMATION_FILE.sorted
diff $OLD_STACK_CONFIG.sorted $CLOUDFORMATION_FILE.sorted || true

# upload the cloudformation json using the aws cli
if ! cmp $OLD_STACK_CONFIG.sorted $CLOUDFORMATION_FILE.sorted; then
  aws cloudformation $STACK_ACTION \
    --stack-name $STACK_NAME \
    --template-body file://$CLOUDFORMATION_FILE.sorted
  boosh watch --name $STACK_NAME
fi

# report status
VERSION=$(sha1sum $CLOUDFORMATION_FILE.sorted | cut -d' ' -f1)
jq -n "{version: {sha1: \"$VERSION\"}, metadata: []}" >&3
