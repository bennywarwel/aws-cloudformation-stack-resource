#!/bin/bash

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging
. $(dirname $0)/functions.sh

input="$(cat)"
cd "$1"

AWS_ACCESS_KEY_ID="$(echo "$input" | jq -r '.source.access_key // empty')"
AWS_SECRET_ACCESS_KEY="$(echo "$input" | jq -r '.source.secret_key // empty')"
if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
    export AWS_ACCESS_KEY_ID
    export AWS_SECRET_ACCESS_KEY
fi

name="$(echo "$input" | jq -r '.source.name // empty')"
region="$(echo "$input" | jq -r '.source.region // "us-east-1"')"
template="$(echo "$input" | jq -r '.params.template // empty')"
parameters="$(echo "$input" | jq -r '.params.parameters // empty')"
parameters_aws="$(echo "$input" | jq -r '.params.parameters_aws // empty')"
tags="$(echo "$input" | jq -r '.params.tags // empty')"
capabilities="$(echo "$input" | jq '.params.capabilities // []')"
if [ -z "$name" ]; then
    echo "Must specify 'name' parameter"
    exit 1
fi

if [ -z "$template" ]; then
    echo "Must specify 'template' parameter"
    exit 1
fi

if [ ! -f "$template" ]; then
    echo "Template file $template does not exist"
    exit 1
fi

echo "parsed"

if [ -n "$parameters" ]; then
    if [ ! -f "$parameters" ]; then
        echo "Parameter file $parameters does not exist"
        exit 1
    fi
    parameters_value="$(jq -c 'to_entries | map({ParameterKey: .key, ParameterValue: .value})' < "$parameters")"
elif [ -n "$parameters_aws" ]; then
    if [ ! -f "$parameters_aws" ]; then
        echo "Parameter file $parameters_aws does not exist"
        exit 1
    fi
    parameters_value="$(jq -c '.' < "$parameters_aws")";
else
    parameters_value="$(jq -nc '[]')"
fi
echo "parsed2"


if [ -n "$tags" ]; then
    if [ ! -f "$tags" ]; then
        echo "Tags file does not exist"
        exit 1
    fi
    tags_value="$(jq -c '.' < "$tags")"
else
    tags_value="$(jq -cn '[]')"
fi

echo "parsed3"


echo "BEGINNING DEPLOYMENT PROCESS FOR STACK $name"
echo ""
echo "PRE-DEPLOY STATE:"
echo ""
awaitComplete "$region" "$name"
exit_code="$?"
if [ "$exit_code" -eq 0 ] || [ "$exit_code" -eq 35 ] ; then
    type="UPDATE"
elif [ "$exit_code" -eq 25 ]; then
    type="CREATE"
else
    exit "$exit_code"
fi

cli_input=$(jq -cn \
   --arg client_token "$(cat /proc/sys/kernel/random/uuid)" \
   --arg change_set_name "$(date -I'seconds')"  \
   --arg stack_name "${name}" \
   --argjson parameters "${parameters_value}" \
   --argjson tags "${tags_value}" \
   --argjson capabilities "${capabilities}" \
   --arg type "${type}" \
   --arg template "file://${template}" \
'{
    "StackName": $stack_name,
    "TemplateBody": $template,
    "UsePreviousTemplate": false,
    "Parameters": $parameters,
    "Capabilities": $capabilities,
    "Tags": $tags,
    "ChangeSetName": $change_set_name,
    "ClientToken": "$client_token",
    "ChangeSetType": $type
}')

cli_input=$(jq -cn \
   --arg client_token "$(cat /proc/sys/kernel/random/uuid)" \
   --arg change_set_name "$(date -I'seconds')"  \
   --arg stack_name "${name}" \
   --argjson parameters "${parameters_value}" \
   --argjson tags "${tags_value}" \
   --argjson capabilities "${capabilities}" \
   --arg type "${type}" \
   --arg template "file://${template}" \
'{
    "StackName": $stack_name,
    "TemplateBody": $template,
    "UsePreviousTemplate": false,
    "Parameters": $parameters,
    "Capabilities": $capabilities,
    "Tags": $tags,
    "ChangeSetName": $change_set_name,
    "ClientToken": "$client_token",
    "ChangeSetType": $type
}')

echo ""
echo ""
echo "DEPLOY STATE:"
echo ""
echo "CREATING CHANGE SET ${change_set_name}"
start_epoch="$(date +%s)"

output="$(aws_with_retry --region $region cloudformation create-change-set --cli-input-json "${cli_input}")"
exit_code=$?

echo "$output"
echo ""
echo ""

if [ "$exit_code" -eq 0 ]; then
    change_set_arn=$(echo "$output" | jq '.Id')
    aws_with_retry --region $region cloudformation wait change-set-create-complete --change-set-name "${change_set_arn}"
    exit_code="$?"
    if [ "$exit_code" -eq 0 ]; then
        aws_with_retry --region $region cloudformation execute-change-set --stack-name "${change_set_arn}"
        exit_code="$?"
    elif echo "$output" | grep -q 'No changes to deploy.'; then
       exit_code=0
       no_changes=true
    fi

    if [ "$exit_code" -eq 0 ]; then
        echo "POST-DEPLOY STATE:"
        echo ""
        output="$(awaitComplete "$region" "$name")"
        exit_code="$?"
        echo "$output"
        echo ""
        echo ""
        if [ "$no_changes" = true ] && [ "$exit_code" -eq 35 ]; then
            exit_code=0
        fi
        if [ "$exit_code" -eq 0 ] ; then
            new_version="$(echo "$output" | jq -c -r '{ "version": { "arn" : .StackId, "time" : ( .LastUpdatedTime // .CreationTime ) } }')";
            echo "$new_version" >&3
        fi
    fi;
fi
if [ "$exit_code" -ne 0 ]; then
    echo "DEPLOY FAILED:"
    showErrors "$region" "$name" "$start_epoch"
    echo ""
    echo ""
    echo "POST-FAILED-DEPLOY STATE:"
    echo ""
    awaitComplete "$region" "$name"
fi
exit "$exit_code"